# AWS RDS Database Configuration
# Generated by Teleform (IaC) DevOps Generator

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Variables
variable "db_identifier" {
  description = "The name of the RDS instance"
  type        = string
  default     = "aa"
}

variable "engine" {
  description = "Database engine"
  type        = string
  default     = "mysql"
}

variable "engine_version" {
  description = "Database engine version"
  type        = string
  default     = "8.0"
}

variable "instance_class" {
  description = "The compute and memory capacity of the DB instance"
  type        = string
  default     = "db.t3.micro"
}

variable "allocated_storage" {
  description = "The allocated storage in gibibytes"
  type        = number
  default     = 20
}

variable "max_allocated_storage" {
  description = "The upper limit for automatic storage scaling"
  type        = number
  default     = 100
}

variable "storage_type" {
  description = "Storage type (gp2, gp3, io1, io2)"
  type        = string
  default     = "gp2"
}

variable "storage_encrypted" {
  description = "Enable storage encryption"
  type        = bool
  default     = true
}

variable "db_name" {
  description = "The name of the database to create"
  type        = string
  default     = "teleformdb"
}

variable "username" {
  description = "Username for the master DB user"
  type        = string
  default     = "admin"
}

variable "password" {
  description = "Password for the master DB user"
  type        = string
  sensitive   = true
  default     = "Skynet.07"
}



variable "backup_retention_period" {
  description = "The days to retain backups for"
  type        = number
  default     = 7
}





variable "deletion_protection" {
  description = "Enable deletion protection"
  type        = bool
  default     = true
}

# Data sources
data "aws_availability_zones" "available" {
  state = "available"
}

# VPC and Subnets (if not provided)
resource "aws_vpc" "rds_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "${var.db_identifier}-vpc"
     = ""
  }
}

resource "aws_internet_gateway" "rds_igw" {
  vpc_id = aws_vpc.rds_vpc.id

  tags = {
    Name = "${var.db_identifier}-igw"
  }
}

resource "aws_subnet" "rds_subnet_1" {
  vpc_id            = aws_vpc.rds_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = data.aws_availability_zones.available.names[0]

  tags = {
    Name = "${var.db_identifier}-subnet-1"
  }
}

resource "aws_subnet" "rds_subnet_2" {
  vpc_id            = aws_vpc.rds_vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = data.aws_availability_zones.available.names[1]

  tags = {
    Name = "${var.db_identifier}-subnet-2"
  }
}

resource "aws_route_table" "rds_rt" {
  vpc_id = aws_vpc.rds_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.rds_igw.id
  }

  tags = {
    Name = "${var.db_identifier}-rt"
  }
}

resource "aws_route_table_association" "rds_rta_1" {
  subnet_id      = aws_subnet.rds_subnet_1.id
  route_table_id = aws_route_table.rds_rt.id
}

resource "aws_route_table_association" "rds_rta_2" {
  subnet_id      = aws_subnet.rds_subnet_2.id
  route_table_id = aws_route_table.rds_rt.id
}

# DB Subnet Group
resource "aws_db_subnet_group" "rds_subnet_group" {
  name = "${var.db_identifier}-subnet-group"
  subnet_ids = [aws_subnet.rds_subnet_1.id, aws_subnet.rds_subnet_2.id]

  tags = {
    Name = "${var.db_identifier}-subnet-group"
     = ""
  }
}

# Security Group
resource "aws_security_group" "rds_sg" {
  name_prefix = "${var.db_identifier}-"
  vpc_id      = aws_vpc.rds_vpc.id

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = []
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.db_identifier}-sg"
     = ""
  }
}



# RDS Instance
resource "aws_db_instance" "rds_instance" {
  identifier             = var.db_identifier
  engine                 = var.engine
  engine_version         = var.engine_version
  instance_class         = var.instance_class
  allocated_storage      = var.allocated_storage
  max_allocated_storage  = var.max_allocated_storage
  storage_type           = var.storage_type
  storage_encrypted      = var.storage_encrypted
  
  db_name  = var.db_name
  username = var.username
  password = var.password
  
  
  backup_retention_period = var.backup_retention_period
  
  db_subnet_group_name   = aws_db_subnet_group.rds_subnet_group.name
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  
  
  deletion_protection    = var.deletion_protection
  
  skip_final_snapshot = true
  
  tags = {
    Name = var.db_identifier
     = ""
  }
}

# Outputs
output "rds_endpoint" {
  description = "RDS instance endpoint"
  value       = aws_db_instance.rds_instance.endpoint
}

output "rds_port" {
  description = "RDS instance port"
  value       = aws_db_instance.rds_instance.port
}

output "rds_arn" {
  description = "RDS instance ARN"
  value       = aws_db_instance.rds_instance.arn
}

output "rds_hosted_zone_id" {
  description = "RDS instance hosted zone ID"
  value       = aws_db_instance.rds_instance.hosted_zone_id
}

output "database_name" {
  description = "Name of the database"
  value       = aws_db_instance.rds_instance.db_name
}

output "master_username" {
  description = "Master username"
  value       = aws_db_instance.rds_instance.username
  sensitive   = true
}

output "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.rds_vpc.id
}

output "subnet_ids" {
  description = "IDs of the subnets"
  value       = [aws_subnet.rds_subnet_1.id, aws_subnet.rds_subnet_2.id]
}

output "security_group_id" {
  description = "ID of the security group"
  value       = aws_security_group.rds_sg.id
}

output "subnet_group_name" {
  description = "Name of the DB subnet group"
  value       = aws_db_subnet_group.rds_subnet_group.name
} 