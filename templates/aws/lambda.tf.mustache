# Lambda Function - Teleform Generated
# Generated at: {{timestamp}}
# Region: {{awsRegion}}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# =====================
# VARIABLES
# =====================

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "{{awsRegion}}"
}

variable "function_name" {
  description = "Lambda function name"
  type        = string
  default     = "{{functionName}}"
}

variable "function_description" {
  description = "Lambda function description"
  type        = string
  default     = "{{functionDescription}}"
}

variable "runtime" {
  description = "Lambda runtime"
  type        = string
  default     = "{{runtime}}"
}

variable "handler" {
  description = "Lambda handler"
  type        = string
  default     = "{{handler}}"
}

variable "memory_size" {
  description = "Lambda memory size (MB)"
  type        = number
  default     = {{memorySize}}
}

variable "timeout" {
  description = "Lambda timeout (seconds)"
  type        = number
  default     = {{timeout}}
}

{{#architecture}}
variable "architecture" {
  description = "Lambda architecture"
  type        = string
  default     = "{{architecture}}"
}
{{/architecture}}

# =====================
# IAM ROLE
# =====================

resource "aws_iam_role" "lambda_role" {
  name = "${var.function_name}-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name      = "${var.function_name}-role"
    CreatedBy = "Teleform"
  }
}

# Basic Lambda execution policy
resource "aws_iam_role_policy_attachment" "lambda_basic_execution" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda_role.name
}

{{#enableVpcConfig}}
# VPC execution policy
resource "aws_iam_role_policy_attachment" "lambda_vpc_execution" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
  role       = aws_iam_role.lambda_role.name
}
{{/enableVpcConfig}}

{{#enableDynamoDB}}
# DynamoDB access policy
resource "aws_iam_role_policy" "lambda_dynamodb_policy" {
  name = "${var.function_name}-dynamodb-policy"
  role = aws_iam_role.lambda_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:Query",
          "dynamodb:Scan"
        ]
        Resource = "arn:aws:dynamodb:${var.aws_region}:*:table/*"
      }
    ]
  })
}
{{/enableDynamoDB}}

{{#enableS3}}
# S3 access policy
resource "aws_iam_role_policy" "lambda_s3_policy" {
  name = "${var.function_name}-s3-policy"
  role = aws_iam_role.lambda_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:ListBucket"
        ]
        Resource = ["arn:aws:s3:::*/*", "arn:aws:s3:::*"]
      }
    ]
  })
}
{{/enableS3}}

# =====================
# LAMBDA FUNCTION
# =====================

# Create zip file from source code
data "archive_file" "lambda_zip" {
  type        = "zip"
  output_path = "${var.function_name}.zip"
  
  source {
    content  = <<EOF
{{functionCode}}
EOF
    filename = "{{sourceFile}}"
  }
}

resource "aws_lambda_function" "function" {
  filename         = data.archive_file.lambda_zip.output_path
  function_name    = var.function_name
  role            = aws_iam_role.lambda_role.arn
  handler         = var.handler
  source_code_hash = data.archive_file.lambda_zip.output_base64sha256
  runtime         = var.runtime
  memory_size     = var.memory_size
  timeout         = var.timeout
  description     = var.function_description
  {{#architecture}}
  architectures   = [var.architecture]
  {{/architecture}}

  {{#environmentVariables}}
  environment {
    variables = {
      {{#envVars}}
      {{key}} = "{{value}}"
      {{/envVars}}
    }
  }
  {{/environmentVariables}}

  {{#enableVpcConfig}}
  vpc_config {
    subnet_ids         = [{{subnetIds}}]
    security_group_ids = [{{securityGroupIds}}]
  }
  {{/enableVpcConfig}}

  {{#enableDeadLetterQueue}}
  dead_letter_config {
    target_arn = aws_sqs_queue.dlq[0].arn
  }
  {{/enableDeadLetterQueue}}

  {{#enableTracing}}
  tracing_config {
    mode = "Active"
  }
  {{/enableTracing}}

  tags = {
    Name        = var.function_name
    {{#tags}}
    {{key}}     = "{{value}}"
    {{/tags}}
    CreatedBy   = "Teleform"
    ManagedBy   = "Terraform"
  }

  depends_on = [
    aws_iam_role_policy_attachment.lambda_basic_execution
  ]
}

{{#enableCloudWatchLogs}}
# CloudWatch Log Group
resource "aws_cloudwatch_log_group" "lambda_logs" {
  name              = "/aws/lambda/${var.function_name}"
  retention_in_days = {{logRetentionDays}}

  tags = {
    Name      = "${var.function_name}-logs"
    CreatedBy = "Teleform"
  }
}
{{/enableCloudWatchLogs}}

{{#enableApiGateway}}
# =====================
# API GATEWAY
# =====================

resource "aws_api_gateway_rest_api" "api" {
  name        = "${var.function_name}-api"
  description = "API Gateway for ${var.function_name}"

  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

resource "aws_api_gateway_resource" "proxy" {
  rest_api_id = aws_api_gateway_rest_api.api.id
  parent_id   = aws_api_gateway_rest_api.api.root_resource_id
  path_part   = "{proxy+}"
}

resource "aws_api_gateway_method" "proxy" {
  rest_api_id   = aws_api_gateway_rest_api.api.id
  resource_id   = aws_api_gateway_resource.proxy.id
  http_method   = "ANY"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "lambda" {
  rest_api_id = aws_api_gateway_rest_api.api.id
  resource_id = aws_api_gateway_method.proxy.resource_id
  http_method = aws_api_gateway_method.proxy.http_method

  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.function.invoke_arn
}

resource "aws_api_gateway_deployment" "deployment" {
  depends_on = [aws_api_gateway_integration.lambda]

  rest_api_id = aws_api_gateway_rest_api.api.id
  stage_name  = "{{apiGatewayStage}}"
}

resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.function.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.api.execution_arn}/*/*"
}
{{/enableApiGateway}}

{{#enableEventBridge}}
# =====================
# EVENTBRIDGE RULE
# =====================

resource "aws_cloudwatch_event_rule" "schedule" {
  name                = "${var.function_name}-schedule"
  description         = "Trigger for ${var.function_name}"
  schedule_expression = "{{scheduleExpression}}"

  tags = {
    Name      = "${var.function_name}-schedule"
    CreatedBy = "Teleform"
  }
}

resource "aws_cloudwatch_event_target" "lambda" {
  rule      = aws_cloudwatch_event_rule.schedule.name
  target_id = "LambdaFunction"
  arn       = aws_lambda_function.function.arn
}

resource "aws_lambda_permission" "eventbridge" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.function.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.schedule.arn
}
{{/enableEventBridge}}

{{#enableDeadLetterQueue}}
# =====================
# DEAD LETTER QUEUE
# =====================

resource "aws_sqs_queue" "dlq" {
  count                     = 1
  name                      = "${var.function_name}-dlq"
  message_retention_seconds = 1209600 # 14 days

  tags = {
    Name      = "${var.function_name}-dlq"
    CreatedBy = "Teleform"
  }
}
{{/enableDeadLetterQueue}}

# =====================
# OUTPUTS
# =====================

output "function_name" {
  description = "Lambda function name"
  value       = aws_lambda_function.function.function_name
}

output "function_arn" {
  description = "Lambda function ARN"
  value       = aws_lambda_function.function.arn
}

output "function_invoke_arn" {
  description = "Lambda function invoke ARN"
  value       = aws_lambda_function.function.invoke_arn
}

output "iam_role_arn" {
  description = "IAM role ARN"
  value       = aws_iam_role.lambda_role.arn
}

{{#enableApiGateway}}
output "api_gateway_url" {
  description = "API Gateway URL"
  value       = "${aws_api_gateway_deployment.deployment.invoke_url}/"
}
{{/enableApiGateway}}

{{#enableCloudWatchLogs}}
output "log_group_name" {
  description = "CloudWatch Log Group name"
  value       = aws_cloudwatch_log_group.lambda_logs.name
}
{{/enableCloudWatchLogs}} 