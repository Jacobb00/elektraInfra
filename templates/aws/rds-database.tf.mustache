# AWS RDS Database Configuration
# Generated by Teleform (IaC) DevOps Generator

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Variables
variable "db_identifier" {
  description = "The name of the RDS instance"
  type        = string
  default     = "{{db_identifier}}"
}

variable "engine" {
  description = "Database engine"
  type        = string
  default     = "{{engine}}"
}

variable "engine_version" {
  description = "Database engine version"
  type        = string
  default     = "{{engine_version}}"
}

variable "instance_class" {
  description = "The compute and memory capacity of the DB instance"
  type        = string
  default     = "{{instance_class}}"
}

variable "allocated_storage" {
  description = "The allocated storage in gibibytes"
  type        = number
  default     = {{allocated_storage}}
}

variable "max_allocated_storage" {
  description = "The upper limit for automatic storage scaling"
  type        = number
  default     = {{max_allocated_storage}}
}

variable "storage_type" {
  description = "Storage type (gp2, gp3, io1, io2)"
  type        = string
  default     = "{{storage_type}}"
}

{{#storage_encrypted}}
variable "storage_encrypted" {
  description = "Enable storage encryption"
  type        = bool
  default     = {{storage_encrypted}}
}
{{/storage_encrypted}}

variable "db_name" {
  description = "The name of the database to create"
  type        = string
  default     = "{{db_name}}"
}

variable "username" {
  description = "Username for the master DB user"
  type        = string
  default     = "{{username}}"
}

variable "password" {
  description = "Password for the master DB user"
  type        = string
  sensitive   = true
  default     = "{{password}}"
}

{{#multi_az}}
variable "multi_az" {
  description = "Enable Multi-AZ deployment"
  type        = bool
  default     = {{multi_az}}
}
{{/multi_az}}

{{#publicly_accessible}}
variable "publicly_accessible" {
  description = "Make the DB instance publicly accessible"
  type        = bool
  default     = {{publicly_accessible}}
}
{{/publicly_accessible}}

variable "backup_retention_period" {
  description = "The days to retain backups for"
  type        = number
  default     = {{backup_retention_period}}
}

{{#backup_window}}
variable "backup_window" {
  description = "The daily time range for backups"
  type        = string
  default     = "{{backup_window}}"
}
{{/backup_window}}

{{#maintenance_window}}
variable "maintenance_window" {
  description = "The window to perform maintenance in"
  type        = string
  default     = "{{maintenance_window}}"
}
{{/maintenance_window}}

{{#performance_insights_enabled}}
variable "performance_insights_enabled" {
  description = "Enable Performance Insights"
  type        = bool
  default     = {{performance_insights_enabled}}
}
{{/performance_insights_enabled}}

{{#monitoring_interval}}
variable "monitoring_interval" {
  description = "Enhanced monitoring interval in seconds"
  type        = number
  default     = {{monitoring_interval}}
}
{{/monitoring_interval}}

{{#deletion_protection}}
variable "deletion_protection" {
  description = "Enable deletion protection"
  type        = bool
  default     = {{deletion_protection}}
}
{{/deletion_protection}}

# Data sources
data "aws_availability_zones" "available" {
  state = "available"
}

# VPC and Subnets (if not provided)
{{#create_vpc}}
resource "aws_vpc" "rds_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "${var.db_identifier}-vpc"
    {{#tags}}
    {{key}} = "{{value}}"
    {{/tags}}
  }
}

resource "aws_internet_gateway" "rds_igw" {
  vpc_id = aws_vpc.rds_vpc.id

  tags = {
    Name = "${var.db_identifier}-igw"
  }
}

resource "aws_subnet" "rds_subnet_1" {
  vpc_id            = aws_vpc.rds_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = data.aws_availability_zones.available.names[0]

  tags = {
    Name = "${var.db_identifier}-subnet-1"
  }
}

resource "aws_subnet" "rds_subnet_2" {
  vpc_id            = aws_vpc.rds_vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = data.aws_availability_zones.available.names[1]

  tags = {
    Name = "${var.db_identifier}-subnet-2"
  }
}

resource "aws_route_table" "rds_rt" {
  vpc_id = aws_vpc.rds_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.rds_igw.id
  }

  tags = {
    Name = "${var.db_identifier}-rt"
  }
}

resource "aws_route_table_association" "rds_rta_1" {
  subnet_id      = aws_subnet.rds_subnet_1.id
  route_table_id = aws_route_table.rds_rt.id
}

resource "aws_route_table_association" "rds_rta_2" {
  subnet_id      = aws_subnet.rds_subnet_2.id
  route_table_id = aws_route_table.rds_rt.id
}
{{/create_vpc}}

# DB Subnet Group
resource "aws_db_subnet_group" "rds_subnet_group" {
  name = "${var.db_identifier}-subnet-group"
  {{#create_vpc}}
  subnet_ids = [aws_subnet.rds_subnet_1.id, aws_subnet.rds_subnet_2.id]
  {{/create_vpc}}
  {{^create_vpc}}
  subnet_ids = [{{subnet_ids_formatted}}]
  {{/create_vpc}}

  tags = {
    Name = "${var.db_identifier}-subnet-group"
    {{#tags}}
    {{key}} = "{{value}}"
    {{/tags}}
  }
}

# Security Group
resource "aws_security_group" "rds_sg" {
  name_prefix = "${var.db_identifier}-"
  {{#create_vpc}}
  vpc_id      = aws_vpc.rds_vpc.id
  {{/create_vpc}}
  {{^create_vpc}}
  vpc_id      = "{{vpc_id}}"
  {{/create_vpc}}

  {{#security_group_rules}}
  ingress {
    from_port   = {{port}}
    to_port     = {{port}}
    protocol    = "tcp"
    {{#source_security_group_id}}
    security_groups = ["{{source_security_group_id}}"]
    {{/source_security_group_id}}
    {{#cidr_blocks}}
    cidr_blocks = [{{cidr_blocks_formatted}}]
    {{/cidr_blocks}}
  }
  {{/security_group_rules}}

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.db_identifier}-sg"
    {{#tags}}
    {{key}} = "{{value}}"
    {{/tags}}
  }
}

{{#create_parameter_group}}
# DB Parameter Group
resource "aws_db_parameter_group" "rds_param_group" {
  family = "{{parameter_group_family}}"
  name   = "${var.db_identifier}-param-group"

  {{#parameters}}
  parameter {
    name  = "{{name}}"
    value = "{{value}}"
  }
  {{/parameters}}

  tags = {
    Name = "${var.db_identifier}-param-group"
    {{#tags}}
    {{key}} = "{{value}}"
    {{/tags}}
  }
}
{{/create_parameter_group}}

{{#create_option_group}}
# DB Option Group
resource "aws_db_option_group" "rds_option_group" {
  name                     = "${var.db_identifier}-option-group"
  option_group_description = "Option group for ${var.db_identifier}"
  engine_name              = var.engine
  major_engine_version     = "{{major_engine_version}}"

  {{#options}}
  option {
    option_name = "{{option_name}}"
    {{#option_settings}}
    option_settings {
      name  = "{{name}}"
      value = "{{value}}"
    }
    {{/option_settings}}
  }
  {{/options}}

  tags = {
    Name = "${var.db_identifier}-option-group"
    {{#tags}}
    {{key}} = "{{value}}"
    {{/tags}}
  }
}
{{/create_option_group}}

# RDS Instance
resource "aws_db_instance" "rds_instance" {
  identifier             = var.db_identifier
  engine                 = var.engine
  engine_version         = var.engine_version
  instance_class         = var.instance_class
  allocated_storage      = var.allocated_storage
  max_allocated_storage  = var.max_allocated_storage
  storage_type           = var.storage_type
  {{#storage_encrypted}}
  storage_encrypted      = var.storage_encrypted
  {{/storage_encrypted}}
  
  db_name  = var.db_name
  username = var.username
  password = var.password
  
  {{#multi_az}}
  multi_az               = var.multi_az
  {{/multi_az}}
  {{#publicly_accessible}}
  publicly_accessible    = var.publicly_accessible
  {{/publicly_accessible}}
  
  backup_retention_period = var.backup_retention_period
  {{#backup_window}}
  backup_window          = var.backup_window
  {{/backup_window}}
  {{#maintenance_window}}
  maintenance_window     = var.maintenance_window
  {{/maintenance_window}}
  
  db_subnet_group_name   = aws_db_subnet_group.rds_subnet_group.name
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  
  {{#create_parameter_group}}
  parameter_group_name   = aws_db_parameter_group.rds_param_group.name
  {{/create_parameter_group}}
  {{#create_option_group}}
  option_group_name      = aws_db_option_group.rds_option_group.name
  {{/create_option_group}}
  
  {{#performance_insights_enabled}}
  performance_insights_enabled = var.performance_insights_enabled
  {{/performance_insights_enabled}}
  {{#monitoring_interval}}
  monitoring_interval    = var.monitoring_interval
  {{/monitoring_interval}}
  {{#deletion_protection}}
  deletion_protection    = var.deletion_protection
  {{/deletion_protection}}
  
  skip_final_snapshot = true
  
  tags = {
    Name = var.db_identifier
    {{#tags}}
    {{key}} = "{{value}}"
    {{/tags}}
  }
}

# Outputs
output "rds_endpoint" {
  description = "RDS instance endpoint"
  value       = aws_db_instance.rds_instance.endpoint
}

output "rds_port" {
  description = "RDS instance port"
  value       = aws_db_instance.rds_instance.port
}

output "rds_arn" {
  description = "RDS instance ARN"
  value       = aws_db_instance.rds_instance.arn
}

output "rds_hosted_zone_id" {
  description = "RDS instance hosted zone ID"
  value       = aws_db_instance.rds_instance.hosted_zone_id
}

output "database_name" {
  description = "Name of the database"
  value       = aws_db_instance.rds_instance.db_name
}

output "master_username" {
  description = "Master username"
  value       = aws_db_instance.rds_instance.username
  sensitive   = true
}

{{#create_vpc}}
output "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.rds_vpc.id
}

output "subnet_ids" {
  description = "IDs of the subnets"
  value       = [aws_subnet.rds_subnet_1.id, aws_subnet.rds_subnet_2.id]
}
{{/create_vpc}}

output "security_group_id" {
  description = "ID of the security group"
  value       = aws_security_group.rds_sg.id
}

output "subnet_group_name" {
  description = "Name of the DB subnet group"
  value       = aws_db_subnet_group.rds_subnet_group.name
} 