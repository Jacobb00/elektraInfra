# DynamoDB Table - Teleform Generated
# Generated at: {{timestamp}}
# Region: {{awsRegion}}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# =====================
# VARIABLES
# =====================

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "{{awsRegion}}"
}

variable "table_name" {
  description = "DynamoDB table name"
  type        = string
  default     = "{{tableName}}"
}

variable "billing_mode" {
  description = "DynamoDB billing mode (PAY_PER_REQUEST or PROVISIONED)"
  type        = string
  default     = "{{billingMode}}"
}

{{#provisionedMode}}
variable "read_capacity" {
  description = "Read capacity units"
  type        = number
  default     = {{readCapacity}}
}

variable "write_capacity" {
  description = "Write capacity units"
  type        = number
  default     = {{writeCapacity}}
}
{{/provisionedMode}}

variable "hash_key" {
  description = "Hash key name"
  type        = string
  default     = "{{hashKey}}"
}

variable "hash_key_type" {
  description = "Hash key type (S, N, or B)"
  type        = string
  default     = "{{hashKeyType}}"
}

{{#rangeKey}}
variable "range_key" {
  description = "Range key name"
  type        = string
  default     = "{{rangeKey}}"
}

variable "range_key_type" {
  description = "Range key type (S, N, or B)"
  type        = string
  default     = "{{rangeKeyType}}"
}
{{/rangeKey}}

{{#enableEncryption}}
variable "encryption_enabled" {
  description = "Enable server-side encryption"
  type        = bool
  default     = true
}
{{/enableEncryption}}

{{#enablePointInTimeRecovery}}
variable "point_in_time_recovery" {
  description = "Enable point-in-time recovery"
  type        = bool
  default     = true
}
{{/enablePointInTimeRecovery}}

{{#enableTtl}}
variable "ttl_attribute_name" {
  description = "TTL attribute name"
  type        = string
  default     = "{{ttlAttributeName}}"
}
{{/enableTtl}}

{{#enableStreams}}
variable "stream_enabled" {
  description = "Enable DynamoDB Streams"
  type        = bool
  default     = true
}

variable "stream_view_type" {
  description = "Stream view type"
  type        = string
  default     = "{{streamViewType}}"
}
{{/enableStreams}}

# =====================
# DYNAMODB TABLE
# =====================

resource "aws_dynamodb_table" "table" {
  name           = var.table_name
  billing_mode   = var.billing_mode
  
  {{#provisionedMode}}
  read_capacity  = var.read_capacity
  write_capacity = var.write_capacity
  {{/provisionedMode}}
  
  hash_key       = var.hash_key
  {{#rangeKey}}
  range_key      = var.range_key
  {{/rangeKey}}

  # Hash key attribute
  attribute {
    name = var.hash_key
    type = var.hash_key_type
  }
  
  {{#rangeKey}}
  # Range key attribute
  attribute {
    name = var.range_key
    type = var.range_key_type
  }
  {{/rangeKey}}
  
  {{#additionalAttributes}}
  # Additional attributes for indexes
  {{#attributes}}
  attribute {
    name = "{{name}}"
    type = "{{type}}"
  }
  {{/attributes}}
  {{/additionalAttributes}}

  {{#enableEncryption}}
  # Server-side encryption
  server_side_encryption {
    enabled = var.encryption_enabled
  }
  {{/enableEncryption}}

  {{#enablePointInTimeRecovery}}
  # Point-in-time recovery
  point_in_time_recovery {
    enabled = var.point_in_time_recovery
  }
  {{/enablePointInTimeRecovery}}

  {{#enableTtl}}
  # TTL configuration
  ttl {
    attribute_name = var.ttl_attribute_name
    enabled        = true
  }
  {{/enableTtl}}

  {{#enableStreams}}
  # DynamoDB Streams
  stream_enabled   = var.stream_enabled
  stream_view_type = var.stream_view_type
  {{/enableStreams}}

  {{#globalSecondaryIndexes}}
  # Global Secondary Indexes
  {{#gsiList}}
  global_secondary_index {
    name            = "{{name}}"
    hash_key        = "{{hashKey}}"
    {{#rangeKey}}
    range_key       = "{{rangeKey}}"
    {{/rangeKey}}
    {{#projectionType}}
    projection_type = "{{projectionType}}"
    {{/projectionType}}
    {{#nonKeyAttributes}}
    non_key_attributes = [{{nonKeyAttributesFormatted}}]
    {{/nonKeyAttributes}}
    {{#provisionedMode}}
    read_capacity   = {{readCapacity}}
    write_capacity  = {{writeCapacity}}
    {{/provisionedMode}}
  }
  {{/gsiList}}
  {{/globalSecondaryIndexes}}

  {{#localSecondaryIndexes}}
  # Local Secondary Indexes
  {{#lsiList}}
  local_secondary_index {
    name            = "{{name}}"
    range_key       = "{{rangeKey}}"
    {{#projectionType}}
    projection_type = "{{projectionType}}"
    {{/projectionType}}
    {{#nonKeyAttributes}}
    non_key_attributes = [{{nonKeyAttributesFormatted}}]
    {{/nonKeyAttributes}}
  }
  {{/lsiList}}
  {{/localSecondaryIndexes}}

  tags = {
    Name        = var.table_name
    {{#tags}}
    {{key}}     = "{{value}}"
    {{/tags}}
    CreatedBy   = "Teleform"
    ManagedBy   = "Terraform"
  }

  {{#provisionedMode}}
  {{#enableAutoScaling}}
  lifecycle {
    ignore_changes = [read_capacity, write_capacity]
  }
  {{/enableAutoScaling}}
  {{/provisionedMode}}
}

{{#provisionedMode}}
{{#enableAutoScaling}}
# =====================
# AUTO SCALING
# =====================

# Auto Scaling Role
resource "aws_iam_role" "dynamodb_autoscaling_role" {
  name = "${var.table_name}-autoscaling-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "application-autoscaling.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "dynamodb_autoscaling_policy" {
  role       = aws_iam_role.dynamodb_autoscaling_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonDynamoDBAutoscalingRole"
}

# Read capacity auto scaling
resource "aws_appautoscaling_target" "read_target" {
  max_capacity       = {{autoScalingMaxReadCapacity}}
  min_capacity       = {{autoScalingMinReadCapacity}}
  resource_id        = "table/${aws_dynamodb_table.table.name}"
  scalable_dimension = "dynamodb:table:ReadCapacityUnits"
  service_namespace  = "dynamodb"
  role_arn          = aws_iam_role.dynamodb_autoscaling_role.arn
}

resource "aws_appautoscaling_policy" "read_policy" {
  name               = "${var.table_name}-read-autoscaling"
  policy_type        = "TargetTrackingScaling"
  resource_id        = aws_appautoscaling_target.read_target.resource_id
  scalable_dimension = aws_appautoscaling_target.read_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.read_target.service_namespace

  target_tracking_scaling_policy_configuration {
    predefined_metric_specification {
      predefined_metric_type = "DynamoDBReadCapacityUtilization"
    }
    target_value = {{autoScalingTargetValue}}
  }
}

# Write capacity auto scaling
resource "aws_appautoscaling_target" "write_target" {
  max_capacity       = {{autoScalingMaxWriteCapacity}}
  min_capacity       = {{autoScalingMinWriteCapacity}}
  resource_id        = "table/${aws_dynamodb_table.table.name}"
  scalable_dimension = "dynamodb:table:WriteCapacityUnits"
  service_namespace  = "dynamodb"
  role_arn          = aws_iam_role.dynamodb_autoscaling_role.arn
}

resource "aws_appautoscaling_policy" "write_policy" {
  name               = "${var.table_name}-write-autoscaling"
  policy_type        = "TargetTrackingScaling"
  resource_id        = aws_appautoscaling_target.write_target.resource_id
  scalable_dimension = aws_appautoscaling_target.write_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.write_target.service_namespace

  target_tracking_scaling_policy_configuration {
    predefined_metric_specification {
      predefined_metric_type = "DynamoDBWriteCapacityUtilization"
    }
    target_value = {{autoScalingTargetValue}}
  }
}
{{/enableAutoScaling}}
{{/provisionedMode}}

{{#enableBackup}}
# =====================
# BACKUP CONFIGURATION
# =====================

resource "aws_backup_plan" "dynamodb_backup" {
  name = "${var.table_name}-backup-plan"

  rule {
    rule_name         = "daily-backups"
    target_vault_name = aws_backup_vault.dynamodb_vault.name
    schedule          = "cron(0 2 * * ? *)" # Daily at 2 AM UTC
    
    lifecycle {
      delete_after = {{backupRetentionDays}}
    }
  }

  tags = {
    Name      = "${var.table_name}-backup-plan"
    CreatedBy = "Teleform"
  }
}

resource "aws_backup_vault" "dynamodb_vault" {
  name = "${var.table_name}-backup-vault"

  tags = {
    Name      = "${var.table_name}-backup-vault"
    CreatedBy = "Teleform"
  }
}

resource "aws_backup_selection" "dynamodb_selection" {
  iam_role_arn = aws_iam_role.backup_role.arn
  name         = "${var.table_name}-backup-selection"
  plan_id      = aws_backup_plan.dynamodb_backup.id

  resources = [
    aws_dynamodb_table.table.arn
  ]
}

resource "aws_iam_role" "backup_role" {
  name = "${var.table_name}-backup-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "backup.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "backup_policy" {
  role       = aws_iam_role.backup_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"
}
{{/enableBackup}}

# =====================
# OUTPUTS
# =====================

output "table_name" {
  description = "DynamoDB table name"
  value       = aws_dynamodb_table.table.name
}

output "table_arn" {
  description = "DynamoDB table ARN"
  value       = aws_dynamodb_table.table.arn
}

output "table_id" {
  description = "DynamoDB table ID"
  value       = aws_dynamodb_table.table.id
}

{{#enableStreams}}
output "stream_arn" {
  description = "DynamoDB stream ARN"
  value       = aws_dynamodb_table.table.stream_arn
}

output "stream_label" {
  description = "DynamoDB stream label"
  value       = aws_dynamodb_table.table.stream_label
}
{{/enableStreams}}

{{#globalSecondaryIndexes}}
output "global_secondary_indexes" {
  description = "Global secondary index details"
  value = {
    {{#gsiList}}
    {{name}} = {
      arn = aws_dynamodb_table.table.global_secondary_index[{{@index}}].arn
    }
    {{/gsiList}}
  }
}
{{/globalSecondaryIndexes}} 