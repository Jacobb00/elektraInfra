# VPC Configuration - Teleform Generated
# Generated at: {{timestamp}}
# Region: {{awsRegion}}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# =====================
# VARIABLES
# =====================

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "{{awsRegion}}"
}

variable "vpc_name" {
  description = "Name of the VPC"
  type        = string
  default     = "{{vpcName}}"
}

variable "vpc_cidr" {
  description = "CIDR block for VPC"
  type        = string
  default     = "{{vpcCidr}}"
}

variable "availability_zones" {
  description = "Number of availability zones"
  type        = number
  default     = {{availabilityZones}}
}

variable "enable_nat_gateway" {
  description = "Enable NAT Gateway for private subnets"
  type        = bool
  default     = {{enableNatGateway}}
}

variable "single_nat_gateway" {
  description = "Use single NAT Gateway for all private subnets"
  type        = bool
  default     = {{singleNatGateway}}
}

variable "enable_dns_hostnames" {
  description = "Enable DNS hostnames in VPC"
  type        = bool
  default     = {{enableDnsHostnames}}
}

variable "enable_dns_support" {
  description = "Enable DNS support in VPC"
  type        = bool
  default     = {{enableDnsSupport}}
}

{{#enableVpnGateway}}
variable "enable_vpn_gateway" {
  description = "Enable VPN Gateway"
  type        = bool
  default     = true
}
{{/enableVpnGateway}}

# =====================
# DATA SOURCES
# =====================

data "aws_availability_zones" "available" {
  state = "available"
}

# =====================
# VPC
# =====================

resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = var.enable_dns_hostnames
  enable_dns_support   = var.enable_dns_support

  tags = {
    Name        = var.vpc_name
    {{#tags}}
    {{key}}     = "{{value}}"
    {{/tags}}
    CreatedBy   = "Teleform"
    ManagedBy   = "Terraform"
  }
}

# =====================
# INTERNET GATEWAY
# =====================

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "${var.vpc_name}-igw"
    CreatedBy = "Teleform"
  }
}

# =====================
# PUBLIC SUBNETS
# =====================

resource "aws_subnet" "public" {
  count                   = var.availability_zones
  vpc_id                  = aws_vpc.main.id
  cidr_block              = cidrsubnet(var.vpc_cidr, 8, count.index)
  availability_zone       = data.aws_availability_zones.available.names[count.index]
  map_public_ip_on_launch = true

  tags = {
    Name = "${var.vpc_name}-public-${data.aws_availability_zones.available.names[count.index]}"
    Type = "Public"
    CreatedBy = "Teleform"
  }
}

# =====================
# PRIVATE SUBNETS
# =====================

resource "aws_subnet" "private" {
  count             = var.availability_zones
  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(var.vpc_cidr, 8, count.index + 100)
  availability_zone = data.aws_availability_zones.available.names[count.index]

  tags = {
    Name = "${var.vpc_name}-private-${data.aws_availability_zones.available.names[count.index]}"
    Type = "Private"
    CreatedBy = "Teleform"
  }
}

{{#enableDatabaseSubnets}}
# =====================
# DATABASE SUBNETS
# =====================

resource "aws_subnet" "database" {
  count             = var.availability_zones
  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(var.vpc_cidr, 8, count.index + 200)
  availability_zone = data.aws_availability_zones.available.names[count.index]

  tags = {
    Name = "${var.vpc_name}-database-${data.aws_availability_zones.available.names[count.index]}"
    Type = "Database"
    CreatedBy = "Teleform"
  }
}

resource "aws_db_subnet_group" "database" {
  name       = "${var.vpc_name}-db-subnet-group"
  subnet_ids = aws_subnet.database[*].id

  tags = {
    Name = "${var.vpc_name}-db-subnet-group"
    CreatedBy = "Teleform"
  }
}
{{/enableDatabaseSubnets}}

# =====================
# ELASTIC IPs FOR NAT
# =====================

{{#enableNatGateway}}
resource "aws_eip" "nat" {
  count  = var.single_nat_gateway ? 1 : var.availability_zones
  domain = "vpc"

  tags = {
    Name = "${var.vpc_name}-nat-eip-${count.index + 1}"
    CreatedBy = "Teleform"
  }

  depends_on = [aws_internet_gateway.main]
}
{{/enableNatGateway}}

# =====================
# NAT GATEWAYS
# =====================

{{#enableNatGateway}}
resource "aws_nat_gateway" "main" {
  count         = var.single_nat_gateway ? 1 : var.availability_zones
  subnet_id     = aws_subnet.public[count.index].id
  allocation_id = aws_eip.nat[count.index].id

  tags = {
    Name = "${var.vpc_name}-nat-${count.index + 1}"
    CreatedBy = "Teleform"
  }

  depends_on = [aws_internet_gateway.main]
}
{{/enableNatGateway}}

# =====================
# ROUTE TABLES
# =====================

# Public route table
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = {
    Name = "${var.vpc_name}-public-rt"
    Type = "Public"
    CreatedBy = "Teleform"
  }
}

# Private route tables
resource "aws_route_table" "private" {
  count  = var.single_nat_gateway ? 1 : var.availability_zones
  vpc_id = aws_vpc.main.id

  {{#enableNatGateway}}
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = var.single_nat_gateway ? aws_nat_gateway.main[0].id : aws_nat_gateway.main[count.index].id
  }
  {{/enableNatGateway}}

  tags = {
    Name = "${var.vpc_name}-private-rt-${count.index + 1}"
    Type = "Private"
    CreatedBy = "Teleform"
  }
}

# =====================
# ROUTE TABLE ASSOCIATIONS
# =====================

# Public subnet associations
resource "aws_route_table_association" "public" {
  count          = var.availability_zones
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

# Private subnet associations
resource "aws_route_table_association" "private" {
  count          = var.availability_zones
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = var.single_nat_gateway ? aws_route_table.private[0].id : aws_route_table.private[count.index].id
}

{{#enableDatabaseSubnets}}
# Database subnet associations
resource "aws_route_table_association" "database" {
  count          = var.availability_zones
  subnet_id      = aws_subnet.database[count.index].id
  route_table_id = var.single_nat_gateway ? aws_route_table.private[0].id : aws_route_table.private[count.index].id
}
{{/enableDatabaseSubnets}}

{{#enableVpnGateway}}
# =====================
# VPN GATEWAY
# =====================

resource "aws_vpn_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "${var.vpc_name}-vpn-gateway"
    CreatedBy = "Teleform"
  }
}

resource "aws_vpn_gateway_route_propagation" "main" {
  count          = var.single_nat_gateway ? 1 : var.availability_zones
  vpn_gateway_id = aws_vpn_gateway.main.id
  route_table_id = aws_route_table.private[count.index].id
}
{{/enableVpnGateway}}

{{#enableFlowLogs}}
# =====================
# VPC FLOW LOGS
# =====================

resource "aws_cloudwatch_log_group" "flow_logs" {
  name              = "/aws/vpc/${var.vpc_name}/flow-logs"
  retention_in_days = {{flowLogsRetention}}

  tags = {
    Name = "${var.vpc_name}-flow-logs"
    CreatedBy = "Teleform"
  }
}

resource "aws_iam_role" "flow_logs" {
  name = "${var.vpc_name}-flow-logs-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "vpc-flow-logs.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy" "flow_logs" {
  name = "${var.vpc_name}-flow-logs-policy"
  role = aws_iam_role.flow_logs.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams"
        ]
        Effect = "Allow"
        Resource = "*"
      }
    ]
  })
}

resource "aws_flow_log" "main" {
  iam_role_arn    = aws_iam_role.flow_logs.arn
  log_destination = aws_cloudwatch_log_group.flow_logs.arn
  traffic_type    = "ALL"
  vpc_id          = aws_vpc.main.id

  tags = {
    Name = "${var.vpc_name}-flow-log"
    CreatedBy = "Teleform"
  }
}
{{/enableFlowLogs}}

# =====================
# OUTPUTS
# =====================

output "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.main.id
}

output "vpc_cidr_block" {
  description = "CIDR block of the VPC"
  value       = aws_vpc.main.cidr_block
}

output "public_subnet_ids" {
  description = "IDs of the public subnets"
  value       = aws_subnet.public[*].id
}

output "private_subnet_ids" {
  description = "IDs of the private subnets"
  value       = aws_subnet.private[*].id
}

{{#enableDatabaseSubnets}}
output "database_subnet_ids" {
  description = "IDs of the database subnets"
  value       = aws_subnet.database[*].id
}

output "database_subnet_group_name" {
  description = "Name of the database subnet group"
  value       = aws_db_subnet_group.database.name
}
{{/enableDatabaseSubnets}}

output "internet_gateway_id" {
  description = "ID of the Internet Gateway"
  value       = aws_internet_gateway.main.id
}

{{#enableNatGateway}}
output "nat_gateway_ids" {
  description = "IDs of the NAT Gateways"
  value       = aws_nat_gateway.main[*].id
}

output "nat_eip_addresses" {
  description = "Elastic IP addresses of NAT Gateways"
  value       = aws_eip.nat[*].public_ip
}
{{/enableNatGateway}}

output "availability_zones" {
  description = "List of availability zones used"
  value       = data.aws_availability_zones.available.names
}

{{#enableVpnGateway}}
output "vpn_gateway_id" {
  description = "ID of the VPN Gateway"
  value       = aws_vpn_gateway.main.id
}
{{/enableVpnGateway}} 